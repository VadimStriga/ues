# Generated by Django 4.2.11 on 2024-11-11 08:17

from django.db import migrations, models
import django.db.models.deletion
import electricity_accounting.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('counterparties', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ElectricityMeteringPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('constant_losses', models.PositiveIntegerField(verbose_name='Постоянныен потери трансформатора, кВтч/месяц')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование точки учёта')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Место расположение точки учета')),
                ('losses', models.PositiveIntegerField(verbose_name='Процент потерь на линиях')),
                ('margin', models.FloatField(help_text='Добавочная стоимость, руб./кВтч', verbose_name='Наценка')),
                ('power_supply', models.CharField(max_length=255, verbose_name='Источник питания')),
                ('tariff', models.CharField(choices=[('urban_tariff', 'Тариф для городского населения с однотирфным прибором учета'), ('rural_tariff', 'Тариф для сельского населения с однотирфным прибором учета'), ('low_voltage_tariff', 'Тариф для потребителей с уровнем напряжения НН, рассчитывающихся по I ценовой категории'), ('medium_voltage_tariff_1', 'Тариф для потребителей с уровнем напряжения СН-I, рассчитывающихся по I ценовой категории'), ('medium_voltage_tariff_2', 'Тариф для потребителей с уровнем напряжения СН-II, рассчитывающихся по I ценовой категории'), ('high_voltage_tariff', 'Тариф для потребителей с уровнем напряжения ВН, рассчитывающихся по I ценовой категории'), ('tariff-free', 'Бездоговорное потребление')], default='tariff-free', max_length=200, verbose_name='Тариф')),
                ('transformation_coefficient', models.PositiveIntegerField(help_text='Отношение напряжений на зажимах двух обмоток в режиме холостого\n                     хода, принимается равным отношению чисел их витков.', verbose_name='Коэффициент транформации')),
                ('type_of_accounting', models.CharField(choices=[('Calculation accounting', 'Расчётный учёт'), ('Control accounting', 'Контрольный учёт'), ('Mutual settlement accounting', 'Взаиморасчетный учёт'), ('Transit accounting', 'Транзитный учёт')], default='Calculation accounting', help_text='Прибор учёта может быть расчетным, контрольным, взаиморасчетным, транзитным. Для взаиморасчетных приборов указывается из-под какого (№ счетчика) производится расчет', max_length=255, verbose_name='Тип учёта')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points', to='counterparties.contract', verbose_name='Договор')),
            ],
            options={
                'verbose_name': 'Точка учета электроэнергии',
                'verbose_name_plural': 'Точки учета электроэнергии',
                'ordering': ('contract',),
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(auto_now_add=True, verbose_name='Дата внесения расценок')),
                ('begin_tariff_period', models.DateField(help_text='Начало периода действия тарифов', verbose_name='Начало периода')),
                ('end_tariff_period', models.DateField(help_text='Окончание периода действия тарифов', verbose_name='Окончание периода')),
                ('urban_tariff_1', models.FloatField(help_text='Тариф для городского населения с однотирфным прибором учета.\n                     Для первого диапазона объемов потребления (до 10980 кВт*ч)', verbose_name='Городское 1')),
                ('urban_tariff_2', models.FloatField(help_text='Тариф для городского населения с однотирфным прибором учета.\n                     Для второго диапазона объемов потребления (от 10980 – 14640 кВт*ч)', verbose_name='Городское 2')),
                ('urban_tariff_3', models.FloatField(help_text='Тариф для городского населения с однотирфным прибором учета.\n                     Для третьего диапазона объемов потребления (свыше 14640 кВт*ч)', verbose_name='Городское 3')),
                ('rural_tariff_1', models.FloatField(help_text='Тариф для сельского населения с однотирфным прибором учета.\n                     Для первого диапазона объемов потребления (до 10980 кВт*ч)', verbose_name='Сельское 1')),
                ('rural_tariff_2', models.FloatField(help_text='Тариф для сельского населения с однотирфным прибором учета.\n                     Для второго диапазона объемов потребления (от 10980 – 14640 кВт*ч)', verbose_name='Сельское 2')),
                ('rural_tariff_3', models.FloatField(help_text='Тариф для сельского населения с однотирфным прибором учета.\n                     Для третьего диапазона объемов потребления (свыше 14640 кВт*ч)', verbose_name='Сельское 3')),
                ('high_voltage_tariff', models.FloatField(help_text='Тариф для потребителей с уровнем напряжения ВН,\n                     рассчитывающихся по I ценовой категории', verbose_name='ВН')),
                ('medium_voltage_tariff_1', models.FloatField(help_text='Тариф для потребителей с уровнем напряжения СН-I,\n                     рассчитывающихся по I ценовой категории', verbose_name='СН-I')),
                ('medium_voltage_tariff_2', models.FloatField(help_text='Тариф для потребителей с уровнем напряжения СН-II,\n                     рассчитывающихся по I ценовой категории', verbose_name='СН-II')),
                ('low_voltage_tariff', models.FloatField(help_text='Тариф для потребителей с уровнем напряжения НН,\n                     рассчитывающихся по I ценовой категории', verbose_name='НН')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
                'ordering': ('-end_tariff_period',),
            },
        ),
        migrations.CreateModel(
            name='InterconnectedPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('head_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='head_point', to='electricity_accounting.electricitymeteringpoint', verbose_name='Головной учёт')),
                ('lower_point', models.ForeignKey(help_text=('Объём потребленной электроэнрегии нижестоящей точки учета', 'вычитается из объёма потреблённой электроэнергии', 'вышестоящей точки учёта.'), on_delete=django.db.models.deletion.CASCADE, related_name='lower_point', to='electricity_accounting.electricitymeteringpoint', verbose_name='Нижестоящий учёт')),
            ],
            options={
                'verbose_name': 'Взаимосвязь',
                'verbose_name_plural': 'Взаимосвязи',
            },
        ),
        migrations.CreateModel(
            name='ElectricityMeter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Статус')),
                ('mark', models.CharField(blank=True, max_length=255, verbose_name='Марка счётчика электроэнергии')),
                ('number', models.CharField(blank=True, max_length=255, verbose_name='Заводской номер счётчика электроэнергии')),
                ('installation_date', models.DateField(verbose_name='Дата установки')),
                ('date_of_next_verification', models.DateField(verbose_name='Дата следующей поверки')),
                ('photo', models.ImageField(blank=True, upload_to='contracts/', verbose_name='Фотография счётчика')),
                ('point', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='meters', to='electricity_accounting.electricitymeteringpoint', verbose_name='Точка учёта электроэнергии')),
            ],
            options={
                'verbose_name': 'Счётчик электроэнергии',
                'verbose_name_plural': 'Счётчики электроэнергии',
                'ordering': ('-installation_date',),
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conclusion_date', models.DateField(blank=True, null=True, verbose_name='Дата подписания документа')),
                ('title', models.CharField(max_length=255, verbose_name='Наименование документа')),
                ('file', models.FileField(upload_to=electricity_accounting.models.point_directory_path)),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='electricity_accounting.electricitymeteringpoint')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
                'ordering': ('conclusion_date',),
            },
        ),
        migrations.CreateModel(
            name='CurrentTransformer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField()),
                ('mark', models.CharField(blank=True, max_length=255, verbose_name='Тип трансформатора тока')),
                ('number', models.CharField(blank=True, max_length=255, verbose_name='Заводской номер трансформатора тока')),
                ('installation_date', models.DateField(verbose_name='Дата установки')),
                ('date_of_next_verification', models.DateField(verbose_name='Дата следующей поверки')),
                ('photo', models.ImageField(blank=True, upload_to=electricity_accounting.models.point_directory_path, verbose_name='Фотография трансформатора тока')),
                ('point', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='transformers', to='electricity_accounting.electricitymeteringpoint', verbose_name='Точка учёта электроэнергии')),
            ],
            options={
                'verbose_name': 'Трансформатор тока',
                'verbose_name_plural': 'Трансформаторы тока',
            },
        ),
        migrations.CreateModel(
            name='Calculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateField(verbose_name='Дата снятия показаний')),
                ('readings', models.FloatField(verbose_name='Показания счётчика электрической энергии')),
                ('previous_entry_date', models.DateField(verbose_name='Дата снятия предыдущих показаний')),
                ('previous_readings', models.FloatField(verbose_name='Предыдущие показания счётчика электрической энергии')),
                ('difference_readings', models.FloatField(verbose_name='Разность показаний')),
                ('transformation_coefficient', models.PositiveIntegerField(verbose_name='Коэффициент транформации')),
                ('amount', models.FloatField(verbose_name='Количество кВтч')),
                ('deductible_amount', models.FloatField(verbose_name='Вычитаемое количество кВтч')),
                ('losses', models.PositiveIntegerField(verbose_name='Процент потерь на линиях')),
                ('constant_losses', models.PositiveIntegerField(verbose_name='Постоянныен потери трансформатора, кВтч/месяц')),
                ('result_amount', models.FloatField(verbose_name='Результат кВтч')),
                ('tariff1', models.FloatField(verbose_name='Тариф для первого диапазона объёмов потребления (до 10980 кВт*ч)')),
                ('tariff2', models.FloatField(verbose_name='Тариф для второго диапазона объёмов потребления (от 10980 – 14640 кВт*ч)')),
                ('tariff3', models.FloatField(verbose_name='Тариф тля третьего диапазона объёмов потребления (свыше 14640 кВт*ч)')),
                ('margin', models.FloatField(help_text='Добавочная стоимость, руб./кВтч', verbose_name='Наценка')),
                ('accrued', models.FloatField(verbose_name='Начислено')),
                ('accrued_NDS', models.FloatField(verbose_name='Начислено с НДС')),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electricity_accounting.electricitymeter')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to='electricity_accounting.electricitymeteringpoint')),
            ],
            options={
                'verbose_name': 'Показания',
                'verbose_name_plural': 'Показания',
                'ordering': ('-entry_date',),
            },
        ),
        migrations.AddConstraint(
            model_name='interconnectedpoints',
            constraint=models.UniqueConstraint(fields=('head_point', 'lower_point'), name='unique_deduction'),
        ),
    ]
